---
description: threads 크롤러를 수정할 때 참고하세요
globs:
alwaysApply: false
---
# Threads 크롤러 가이드

Meta의 Threads 플랫폼에서 게시글을 크롤링하는 시스템에 대한 종합 가이드입니다.

## 📁 파일 구조

### 핵심 파일들
- [src/crawlers/threads.py](mdc:src/crawlers/threads.py) - Threads 전용 크롤러
- [src/crawlers/base.py](mdc:src/crawlers/base.py) - 모든 크롤러의 베이스 클래스
- [main.py](mdc:main.py) - CLI 인터페이스
- [src/models.py](mdc:src/models.py) - 데이터 모델 정의

### 설정 파일들
- `.env` - 환경 변수 (로그인 정보)
- `data/threads_session.json` - 세션 상태 저장

## 🌐 Threads 웹사이트 구조

### URL 패턴
```
https://threads.net/ - 메인 피드
https://threads.net/login - 로그인 페이지
https://www.instagram.com/accounts/login/ - Instagram 로그인 페이지
https://threads.net/@username/post/POST_ID - 개별 게시글
```

### DOM 구조 특성
```html
<!-- 로그인 버튼 -->
<div role="button" tabindex="0">Continue with Instagram</div>

<!-- 게시글 컨테이너 -->
<div class="x78zum5 xdt5ytf">
  <!-- 작성자 링크 -->
  <a href="/@username">username</a>

  <!-- 게시 시간 -->
  <time datetime="2024-01-01T12:00:00.000Z">1h</time>

  <!-- 콘텐츠 -->
  <span class="xi7mnp6">게시글 내용</span>

  <!-- 상호작용 버튼들 -->
  <svg aria-label="Like">...</svg>
  <svg aria-label="Comment">...</svg>
  <svg aria-label="Repost">...</svg>
</div>

<!-- 로그인된 상태 지표 -->
<div role="button">What's new?</div>
<div role="button">Post</div>
```

## 🔄 크롤링 프로세스 흐름도

```mermaid
graph TD
    A[시작] --> B[환경 변수 로드]
    B --> C[세션 파일 확인]
    C --> D{세션 존재?}

    D -->|Yes| E[세션 로드 시도]
    D -->|No| F[새 로그인 필요]

    E --> G{로그인 상태 확인}
    G -->|Success| H[피드 페이지 이동]
    G -->|Failed| F

    F --> I[로그인 버튼 클릭]
    I --> J[Instagram 페이지 이동]
    J --> K[계정 정보 입력]
    K --> L[로그인 처리]
    L --> M{Save info 화면?}

    M -->|Yes| N[Save info 클릭]
    M -->|No| O[로그인 완료 확인]
    N --> P[5초 대기]
    P --> O

    O --> Q[세션 저장]
    Q --> H

    H --> R[게시글 컨테이너 탐색]
    R --> S[DOM 요소 파싱]
    S --> T[데이터 추출]
    T --> U[JSON 저장]
    U --> V[완료]
```

## ⚙️ 주요 설정

### 환경 변수 (.env)
```bash
THREADS_USERNAME=your_instagram_username
THREADS_PASSWORD=your_instagram_password
THREADS_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64)...
THREADS_DEBUG_MODE=false
THREADS_DEBUG_SCREENSHOT_PATH=./data/debug_screenshots
```

### 크롤러 설정
- **User-Agent**: 데스크톱 Chrome (모바일 UI 문제 방지)
- **헤드리스 모드**: 항상 False (브라우저 창 표시)
- **세션 관리**: Storage State 기반
- **타임아웃**: 로그인 30초, 페이지 로드 15초

## 🚨 자주 발생하는 에러와 해결책

### 1. 로그인 버튼을 찾을 수 없음
**증상**: `❌ 로그인 버튼을 찾을 수 없습니다.`

**원인**:
- 잘못된 User-Agent (모바일 vs 데스크톱)
- 이미 로그인된 상태
- 네트워크 연결 문제

**해결책**:
```bash
# 디버그 모드로 실행
python main.py threads --debug

# 환경 변수 확인
echo $THREADS_USER_AGENT
```

### 2. 세션 로드 실패
**증상**: `⚠️ 세션 로드 중 오류: SecurityError`

**원인**:
- localStorage 접근 권한 문제
- 손상된 세션 파일

**해결책**:
```bash
# 세션 파일 삭제 후 재로그인
rm data/threads_session.json
python main.py threads --debug
```

### 3. Instagram 로그인 타임아웃
**증상**: `⚠️ 로그인 처리 중 타임아웃`

**원인**:
- 느린 네트워크
- 2FA 필요
- 잘못된 계정 정보

**해결책**:
1. 타임아웃 시간 증가 (환경변수)
2. 수동 로그인 (디버그 모드)
3. 계정 정보 확인

### 4. 게시글 추출 실패
**증상**: `🔗 실제 HTML 구조 기반으로 0개의 게시글 컨테이너를 찾았습니다`

**원인**:
- DOM 구조 변경
- 로그인 상태 불안정
- 네트워크 문제

**해결책**:
1. 로그인 상태 재확인
2. 페이지 새로고침
3. DOM 선택자 업데이트

### 5. "Save info" 처리 문제
**증상**: 로그인 후 무한 대기

**원인**:
- 버튼 클릭 후 처리 시간 부족
- 네트워크 불안정

**해결책**:
- 대기 시간 증가 (현재 5초)
- 네트워크 안정화 대기 추가

## 🐛 디버그 모드 활용

### 기본 사용법
```bash
python main.py threads --count 5 --debug
```

### 디버그 기능들
1. **브라우저 표시**: headless=false
2. **개발자 도구**: 자동 열림
3. **스크린샷**: 각 단계별 자동 저장
4. **요소 분석**: 페이지의 모든 버튼 정보 출력
5. **수동 대기**: 사용자 입력으로 단계별 확인

### 스크린샷 파일명 패턴
```
HHMMSS_00_initial_page.png - 초기 페이지
HHMMSS_02_before_login_click_attempt_N.png - 로그인 클릭 전
HHMMSS_04_instagram_login_page_attempt_N.png - Instagram 페이지
HHMMSS_08_login_success_attempt_N.png - 로그인 성공
```

## 🔧 코드 수정 가이드

### 새로운 선택자 추가
```python
# threads.py의 login_button_selectors에 추가
login_button_selectors = [
    'div[role="button"]:has-text("Continue with Instagram")',
    'new_selector_here',  # 새 선택자 추가
]
```

### 게시글 파싱 로직 수정
```python
# _extract_post_data 메서드에서 새 필드 추가
async def _extract_post_data(self, element) -> Dict[str, Any]:
    # 기존 필드들...
    new_field = await self._extract_new_field(element)
    return {
        "author": author,
        "content": content,
        "new_field": new_field,  # 새 필드 추가
        # ...
    }
```

### 에러 핸들링 개선
```python
try:
    # 위험한 작업
    result = await some_operation()
except SpecificError as e:
    typer.echo(f"⚠️ 특정 에러 발생: {e}")
    if self.debug_mode:
        await self._debug_screenshot(page, "error_state")
```

## 📈 성능 최적화

### 크롤링 속도 개선
1. **스크롤 최적화**: 불필요한 스크롤 제거
2. **선택자 우선순위**: 자주 성공하는 선택자를 앞에 배치
3. **타임아웃 조정**: 환경에 맞는 타임아웃 설정

### 메모리 사용량 최적화
1. **게시글 수 제한**: 대량 크롤링 시 배치 처리
2. **세션 정리**: 불필요한 세션 데이터 제거
3. **브라우저 리소스**: 적절한 브라우저 옵션 설정

## 🔒 보안 고려사항

### 계정 보안
- `.env` 파일을 `.gitignore`에 추가
- 강력한 패스워드 사용
- 2FA 설정 권장

### 크롤링 윤리
- 과도한 요청 방지 (적절한 대기 시간)
- robots.txt 준수
- 이용 약관 확인

## 🚀 실행 가이드

### 첫 실행
```bash
# 환경 설정
cp .env.example .env
# .env 파일에 계정 정보 입력

# 첫 크롤링 (디버그 모드 권장)
python main.py threads --count 5 --debug
```

### 정기 실행
```bash
# 일반 모드 (빠른 실행)
python main.py threads --count 20

# 출력 파일 지정
python main.py threads --count 10 --output my_threads.json
```
